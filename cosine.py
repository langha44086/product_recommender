import streamlit as st
import pandas as pd
import pickle

# H√†m l·∫•y g·ª£i √Ω s·∫£n ph·∫©m
def get_recommendations(df, ma_san_pham, cosine_sim, nums=5):
    matching_indices = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
    if not matching_indices:
        st.warning(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {ma_san_pham}")
        return pd.DataFrame()
    idx = matching_indices[0]

    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:nums + 1]
    product_indices = [i[0] for i in sim_scores]

    return df.iloc[product_indices]

# Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω
def display_recommended_products(recommended_products, cols=5):
    for i in range(0, len(recommended_products), cols):
        col_list = st.columns(cols)
        for j, col in enumerate(col_list):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    st.write(f"### {product['ten_san_pham']}")
                    gia_ban_formatted = f"{product['gia_ban']:,.0f}".replace(",", ".")
                    gia_goc_formatted = f"{product['gia_goc']:,.0f}".replace(",", ".")
                    st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
                    st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")
                    expander = st.expander("M√¥ t·∫£")
                    product_description = product['mo_ta']
                    truncated_description = ' '.join(product_description.split()[:100]) + "..."
                    expander.write(truncated_description)

# ƒê·ªçc d·ªØ li·ªáu s·∫£n ph·∫©m v√† kh√°ch h√†ng
df_products = pd.read_csv('San_pham_2xuly.csv')
df_customers = pd.read_csv('Khach_hang_2xuly.csv')

# ƒê·ªçc file cosine similarity
with open('products_cosine_sim.pkl', 'rb') as f:
    cosine_sim_new = pickle.load(f)
    # Gi·ªõi h·∫°n danh s√°ch s·∫£n ph·∫©m v√† kh√°ch h√†ng
limited_products = df_products.head(20)
limited_customers = df_customers.head(20)
# Giao di·ªán Streamlit
st.image('hasaki1.jpg', use_container_width=True)
st.title("üíé H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m Recommender System üíé")
# GUI
st.title("Data Science Project 2 Deployment")
st.write("Content-Based Filtering")

menu = ["Business Objective","Hi·ªÉn th·ªã chart", "G·ª£i √Ω s·∫£n ph·∫©m", "G·ª£i √Ω m√£ kh√°ch h√†ng"]
choice = st.sidebar.selectbox('Menu', menu)

st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:
                 Phan VƒÉn Minh & Cao Anh H√†o""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n:Ms Ph∆∞∆°ng """)
st.sidebar.write("""#### Ng√†y b√°o c√°o t·ªët nghi·ªáp: 16/12/2024""")

if choice == 'Business Objective':
   
    st.subheader("Business Objective")
    st.write("""
    ###### HASAKI.VN l√† h·ªá th·ªëng c·ª≠a h√†ng m·ªπ ph·∫©m ch√≠nh h√£ng v√† d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp chuy√™n s√¢u v·ªõi h·ªá th·ªëng c·ª≠a h√†ng tr·∫£i d√†i to√†n qu·ªëc.H·ªç mu·ªën bi·∫øt v·ªÅ s·∫£n ph·∫©m c·ªßa m√¨nh th√¥ng qua l·ª±a ch·ªçn s·∫£n ph·∫©m,ƒë√°nh gi√° c·ªßa kh√°ch h√†ng nh·∫±m ph·ª•c v·ª• t·ªët cho vi·ªác ph√°t tri·ªÉn kinh doanh v√† ƒë√°p ·ª©ng th·ªã hi·∫øu c·ªßa kh√°ch h√†ng.
    """)  
    st.write("""###### => Y√™u c·∫ßu: D√πng thu·∫≠t to√°n Machine Learning trong Python ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.C·ª• th·ªÉ l√† d√πng Content-based recommender system""")
    st.image("2.png")

elif choice == 'Hi·ªÉn th·ªã chart':
    st.subheader("Bi·ªÉu ƒë·ªì Heatmap")
    st.write("L·∫•y m·ªôt ph·∫ßn nh·ªè trong Cosine_sim,t∆∞∆°ng ·ª©ng v·ªõi ma tr·∫≠n 18 x18. G·ªìm c√°c gi√° tr·ªã li√™n quan ƒë·∫øn 18 s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong danh s√°ch ƒë·ªÉ tr·ª±c quan ho√°")
    st.image('heatmap.png', use_container_width=True)
elif choice == 'G·ª£i √Ω s·∫£n ph·∫©m':

    # G·ª£i √Ω theo m√£ s·∫£n ph·∫©m
    st.header("üîç G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")

    if "selected_ma_san_pham" not in st.session_state:
        st.session_state.selected_ma_san_pham = None

    product_options = [(row['ten_san_pham'], row['ma_san_pham']) for _, row in limited_products.iterrows()]
    selected_product = st.selectbox(
        "Ch·ªçn s·∫£n ph·∫©m:",
        options=product_options,
        format_func=lambda x: x[0],
        key="product_selectbox"
    )

    if selected_product:
        st.session_state.selected_ma_san_pham = selected_product[1]

    if st.session_state.selected_ma_san_pham:
        ma_san_pham = st.session_state.selected_ma_san_pham
        selected_product_row = df_products[df_products['ma_san_pham'] == ma_san_pham].iloc[0]
        gia_ban_formatted = f"{selected_product_row['gia_ban']:,.0f}".replace(",", ".")
        gia_goc_formatted = f"{selected_product_row['gia_goc']:,.0f}".replace(",", ".")
        st.write("### B·∫°n ƒë√£ ch·ªçn:")
        st.write(f"**T√™n s·∫£n ph·∫©m:** {selected_product_row['ten_san_pham']}")
        st.write(f"**Gi√° b√°n:** {gia_ban_formatted} VND")
        st.write(f"**Gi√° g·ªëc:** {gia_goc_formatted} VND")


        recommendations = get_recommendations(df_products, ma_san_pham, cosine_sim_new, nums=5)
        if not recommendations.empty:
            st.write("### C√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª±:")
            display_recommended_products(recommendations, cols=3)
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m t∆∞∆°ng t·ª±.")
elif choice == 'G·ª£i √Ω m√£ kh√°ch h√†ng':
    # G·ª£i √Ω theo ID kh√°ch h√†ng
    st.header("üë§ G·ª£i √Ω s·∫£n ph·∫©m theo m√£ kh√°ch h√†ng")

    if "selected_user_id" not in st.session_state:
        st.session_state.selected_user_id = None

    # Kh·ªüi t·∫°o tr·∫°ng th√°i l∆∞u s·∫£n ph·∫©m g·∫ßn nh·∫•t c·ªßa t·ª´ng kh√°ch h√†ng
    if "recent_product_by_user" not in st.session_state:
        st.session_state.recent_product_by_user = {}

    # L·ª±a ch·ªçn kh√°ch h√†ng
    customer_options = [(row['ho_ten'], row['userId']) for _, row in limited_customers.iterrows()]
    selected_customer = st.selectbox(
        "Ch·ªçn kh√°ch h√†ng:",
        options=customer_options,
        format_func=lambda x: x[0],
        key="customer_selectbox"
    )

    if selected_customer:
        st.session_state.selected_user_id = selected_customer[1]

    if st.session_state.selected_user_id:
        user_id = st.session_state.selected_user_id
        customer_name = [cust[0] for cust in customer_options if cust[1] == user_id][0]
        st.write(f"Xin ch√†o, **{customer_name}**!")

        # Ki·ªÉm tra s·∫£n ph·∫©m g·∫ßn nh·∫•t ƒë√£ xem cho kh√°ch h√†ng, n·∫øu ch∆∞a c√≥ th√¨ kh·ªüi t·∫°o
        if user_id not in st.session_state.recent_product_by_user:
            st.session_state.recent_product_by_user[user_id] = df_products.sample(1).iloc[0]

        # L·∫•y s·∫£n ph·∫©m g·∫ßn nh·∫•t cho kh√°ch h√†ng hi·ªán t·∫°i
        recent_product = st.session_state.recent_product_by_user[user_id]

        st.write("### S·∫£n ph·∫©m g·∫ßn nh·∫•t ƒë√£ xem:")
        recent_gia_ban = f"{recent_product['gia_ban']:,.0f}".replace(",", ".")
        recent_gia_goc = f"{recent_product['gia_goc']:,.0f}".replace(",", ".")
        st.write(f"- **T√™n s·∫£n ph·∫©m:** {recent_product['ten_san_pham']}")
        st.write(f"- **M√£ s·∫£n ph·∫©m:** {recent_product['ma_san_pham']}")
        st.write(f"- **Gi√° b√°n:** {recent_gia_ban} VND")
        st.write(f"- **Gi√° g·ªëc:** {recent_gia_goc} VND")


        # L·∫•y g·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n s·∫£n ph·∫©m g·∫ßn nh·∫•t
        recommendations = get_recommendations(df_products, recent_product['ma_san_pham'], cosine_sim_new, nums=5)
        if not recommendations.empty:
            st.write("### C√°c s·∫£n ph·∫©m g·ª£i √Ω:")
            display_recommended_products(recommendations, cols=3)
        else:
            st.write("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m g·ª£i √Ω cho kh√°ch h√†ng n√†y.")